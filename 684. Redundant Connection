In this problem, a tree is an undirected graph that is connected and has no cycles.

You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.

Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.

 

Example 1:


Input: edges = [[1,2],[1,3],[2,3]]
Output: [2,3]
Example 2:


Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]
Output: [1,4]




class Solution {
public:
    vector<int> parent;
    
    int findParent(int n){
        if(n == parent[n])
            return n;
        return findParent(parent[n]);
    }
    
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        //vector<int> parent(1001, 0);
        for(int i=0; i<1001; i++)
            parent.push_back(i);
        
        vector<int> res;
        for(auto e : edges){
            int p1 = findParent(e[0]);
            int p2 = findParent(e[1]);
            if(p1 == p2){
                res = e;
            }
            parent[p1] = p2;
        }
        return res;
    }
};



