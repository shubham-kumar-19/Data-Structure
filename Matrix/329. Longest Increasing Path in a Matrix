Given an m x n integers matrix, return the length of the longest increasing path in matrix.

From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).

 

Example 1:


Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]
Output: 4
Explanation: The longest increasing path is [1, 2, 6, 9].
Example 2:


Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]
Output: 4
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.
Example 3:

Input: matrix = [[1]]
Output: 1
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 200
0 <= matrix[i][j] <= 231 - 1




class Solution {
public:
    int fingLength(vector<vector<int>>& matrix, int val, int i, int j, vector<vector<int>>& mem){
        if(mem[i][j] != -1){
            return mem[i][j];
        }
        int m = matrix.size();
        int n = matrix[0].size();
        
        if( (i < 0 || i >= m) || (j < 0 || j >= n) )
            return 0;
        int a=0;
        int b=0;
        int c=0;
        int d=0;
        if(i -1 >= 0 && matrix[i-1][j] > val)
            a = fingLength(matrix, matrix[i-1][j], i-1, j, mem);
        if(i+1 < m && matrix[i+1][j] > val)
            b = fingLength(matrix, matrix[i+1][j], i+1, j, mem);
        if(j -1 >= 0 && matrix[i][j-1] > val)
            c = fingLength(matrix, matrix[i][j-1], i, j-1, mem);
        if(j+1 < n && matrix[i][j+1] > val)
            d = fingLength(matrix, matrix[i][j+1], i, j+1, mem);
        mem[i][j] = max( max(a,b), max(c,d) )+1;
        
        return max( max(a,b), max(c,d) )+1;
        
    }
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> mem;
        for(int i=0; i<m; i++){
            vector<int> temp(n, -1);
            mem.push_back(temp);
        }
        
        int longSeq = 0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                int len = fingLength(matrix, matrix[i][j], i, j, mem);
                if(len > longSeq) 
                    longSeq = len;
            }
        }
        return longSeq;
    }
};
